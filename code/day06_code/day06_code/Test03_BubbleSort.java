/*
数组的算法：
1、找最值
2、找最值及其下标
3、统计：累加和、平均值等
4、反转
5、复制
6、查找：在数组中，查找某个值是否存在，或者查找某个值的下标
（1）数组中的元素是无序的
	顺序查找
（2）数组中的元素是有序的
	①顺序查找
	②二分查找
7、数组的排序
（1）冒泡排序
（2）直接选择排序
*/
class Test03_BubbleSort{
	public static void main(String[] args){
		int[] arr = {4,2,1,8,3};
		
		//希望数组最终是{1,2,3,4,8}或{8,4,3,2,1}
		//现在要实现从小到大
		/*
		冒泡排序：通过相邻元素比较，如果相邻元素的顺序不符合要求，那么就交换。
				 经过几轮之后，实现最终的排序。每一轮都会有一个已经到达正确位置的元素退出比较。
				 
		第一轮：
			第1次：arr[0]和arr[1]比较，4和2比较，不符合要求，交换，{2,4,1,8,3}
			第2次：arr[1]和arr[2]比较，4和1比较，不符合要求，交换，{2,1,4,8,3}
			第3次：arr[2]和arr[3]比较，4和8比较，符合要求
			第4次：arr[3]和arr[4]比较，8和3比较，不符合要求，交换，{2,1,4,3,8}
		
		第一轮之后，最大的，沉到底，跑到最右边
		
		第二轮：
			第1次：arr[0]和arr[1]比较，2和1比较，不符合要求，交换，{1,2,4,3,8}
			第2次：arr[1]和arr[2]比较，2和4比较，符合要求
			第3次：arr[2]和arr[3]比较，4和3比较，不符合要求，交换，{1,2,3,4,8}
		
		第二轮之后，次大的到达正确位置
		
		第三轮：
			第1次：arr[0]和arr[1]比较，1和2比较，符合要求
			第2次：arr[1]和arr[2]比较，2和3比较，符合要求
			
		第四轮：
			第1次：arr[0]和arr[1]比较，1和2比较，符合要求
			
		轮数 = 数组的长度 - 1; //因为每一轮只能确定一个
		*/
		//轮数
		for(int i=1; i<arr.length; i++){//循环次数 = 长度 -1，控制轮数
			/*
			例如：5个元素
			每一轮的次数 = 长度 - i;
			第1轮：4次
			第2轮：3次
			第3轮：2次
			第4轮：1次
			
			第1轮：arr[0]与arr[1]、arr[1]和arr[2]、arr[2]和arr[3]、arr[3]和arr[4]
			第2轮：arr[0]与arr[1]、arr[1]和arr[2]、arr[2]和arr[3]
			第3轮：arr[0]与arr[1]、arr[1]和arr[2]
			第4轮：arr[0]与arr[1]
			
			相邻元素：arr[j] 与 arr[j+1]
			第1轮：j的值 ：0,1,2,3  j<4		j<5-1	j<5-i
			第2轮：j的值 ：0,1,2	j<3		j<5-2
			第3轮：j的值 ：0,1		j<2		j<5-3
			第4轮：j的值 ：0		j<1		j<5-4
			*/
			for(int j=0; j<5-i; j++){
				if(arr[j] > arr[j+1]){//相邻元素比较，左>右，交换
					int temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}
		}
		
		//显示结果
		for(int i=0; i<arr.length; i++){
			System.out.print(arr[i] + " ");
		}
	}
}